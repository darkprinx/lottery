name: Dev CI Workflow

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  code-quality-check:
    name: Code quality & security checks
    runs-on: ubuntu-latest
    # Run as non-blocking initially to introduce checks without breaking pipeline.
    continue-on-error: true
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install ruff and pre-commit
        run: |
          python -m pip install --upgrade pip
          pip install ruff pre-commit safety bandit

      - name: Ruff (lint)
        run: |
          ruff check .

      - name: Run pre-commit on all files
        run: |
          pre-commit run --all-files --show-diff-on-failure --color always

#      - name: Security scan with Bandit    ### use when needed
#        run: bandit -r .

      - name: Audit dependencies with pip-audit
        run: safety scan --full-report

  test:
    runs-on: ubuntu-latest
    outputs:
      date_output: ${{ steps.test_output.outputs.date }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests (pytest)
        run: |
          pytest --cov=. --cov-report=term-missing
          pytest --cov=. --cov-report=xml

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml

      - name: Show artifacts # for learning purpose on artifacts
        run: ls -l

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Test output  # for learning purpose on outputs
        id: test_output
        run: |
          echo "date=$(date)" >> $GITHUB_OUTPUT

  deploy:
    runs-on: ubuntu-latest
    needs: test # can have multiple jobs like [test, xyz]
    steps:
      - name: Get test coverage artifact  # for learning purpose on artifacts
        uses: actions/download-artifact@v4
        with:
          name: coverage-report

      - name: Show artifacts # for learning purpose on artifacts
        run: ls -l

      - name: Use date output  # for learning purpose on outputs
        run: |
          echo "The date is: ${{ steps.test_output.outputs.date_output }}"